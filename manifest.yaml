apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: "512Mi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: "redis:7.0"
          command: ["redis-server", "--appendonly", "yes"]
          volumeMounts:
            - mountPath: /data
              name: redis-data
          ports:
            - containerPort: 6379
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sstester
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: sstester
              command: ["python", "-m", "sstester.tester"]
              image: "grimpen/one:%VERSION%"
              imagePullPolicy: Never
          restartPolicy: OnFailure
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  selector:
    matchLabels:
      app: api
  replicas: 1
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: api
          image: "grimpen/one:%VERSION%"
          command: ["gunicorn", "api.app:create_app()", "-b", "0.0.0.0:8000", "--access-logfile", "-", "--workers", "4"]
          ports:
            - containerPort: 8000
          env:
            - name: API_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: api-secret-key
                  key: secret-key
            - name: ONE_VERSION
              valueFrom:
                configMapKeyRef:
                  name: oneinfo
                  key: version
---
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    app: api
spec:
  type: ClusterIP
  ports:
    - name: api
      port: 80
      targetPort: 8000
  selector:
    app: api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: website
spec:
  selector:
    matchLabels:
      app: website
  replicas: 1
  template:
    metadata:
      labels:
        app: website
    spec:
      containers:
        - name: website
          image: "grimpen/one:%VERSION%"
          command: ["gunicorn", "website.app:create_app()", "-b", "0.0.0.0:8000", "--access-logfile", "-", "--workers", "4"]
          ports:
            - containerPort: 8000
          env:
            - name: WEBSITE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: api-secret-key
                  key: secret-key
---
apiVersion: v1
kind: Service
metadata:
  name: website
  labels:
    app: website
spec:
  type: ClusterIP
  ports:
    - name: api
      port: 80
      targetPort: 8000
  selector:
    app: website
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: connect-worker
spec:
  selector:
    matchLabels:
      app: connect-worker
  replicas: 1
  template:
    metadata:
      labels:
        app: connect-worker
    spec:
      containers:
        - name: worker
          image: "grimpen/one:%VERSION%"
          command: ["python", "-m", "connect.worker"]
          env:
            - name: MAX_CF_TUNNELS
              value: "500"
            - name: CONNECT_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: cloudflare-config
                  key: connect_domain
            - name: CLOUDFLARE_ACCOUNT_ID
              valueFrom:
                configMapKeyRef:
                  name: cloudflare-config
                  key: account_id
            - name: CLOUDFLARE_ZONE_ID
              valueFrom:
                configMapKeyRef:
                  name: cloudflare-config
                  key: zone_id
            - name: CLOUDFLARE_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cloudflare-api-token
                  key: token
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api
  annotations:
    # notice that we need to prefix the middleware name with the
    # namespace it's in (default in this case) and also add the
    # @kubernetescrd suffix, otherwise this won't work.
    traefik.ingress.kubernetes.io/router.middlewares: default-api-prefix-stripper@kubernetescrd,default-api-cors-headers@kubernetescrd, default-ingress-whitelist@kubernetescrd
spec:
  rules:
    - http:
        paths:
          - path: /api/v1
            pathType: Prefix
            backend:
              service:
                name: api
                port:
                  number: 80
---
# looks like k3s traefik does not support the
# traefik.ingress.kubernetes.io/rewrite-target annotation atm, so we
# use this middleware instead to strip the /api/v1 prefix
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: api-prefix-stripper
spec:
  stripPrefix:
    prefixes:
      - /api/v1
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: api-cors-headers
spec:
  headers:
    accessControlAllowMethods:
      - "GET"
      - "OPTIONS"
      - "PUT"
      - "POST"
    accessControlAllowOriginList:
      - "https://grimpen.one"
    accessControlMaxAge: 120
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: website
  annotations:
    # notice that we need to prefix the middleware name with the
    # namespace it's in (default in this case) and also add the
    # @kubernetescrd suffix, otherwise this won't work.
    traefik.ingress.kubernetes.io/router.middlewares: default-ingress-whitelist@kubernetescrd
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: website
                port:
                  number: 80
---
# services are exposed using a cloudflare tunnel, so we only allow
# access from a local address
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: ingress-whitelist
spec:
  ipWhiteList:
    sourceRange:
      - 127.0.0.0/8
      - 192.168.1.0/16
      - 10.0.0.0/8
      - 172.16.0.0/12
